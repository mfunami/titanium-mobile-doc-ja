#summary UIカタログ(API) - アニメーション(3DMatrix除く)
#labels api,view,ui,control,animation,作業中
= UIカタログ(API) - アニメーション =
Window, View, Controlなどの各オブジェクトには{{{animate}}}という関数が用意されており、対象となるオブジェクトに対するアニメーション描画を行うことができます。

その際に引き渡される引数が{{{Titanium.UI.Animation}}}オブジェクトになり、次のような多くのパラメータとなるプロパティを持っています。

|| *名前* || *型* || *説明* ||
||autoreverse||boolean||アニメーション完了後に元に戻るかどうかを指定||
||backgroundColor||string||色アニメーション：背景色||
||bottom||float||移動アニメーション：bottom位置||
||center||object||移動アニメーション：対象オブジェクトの中心座標||
||color||string||色アニメーション：表示色||
||curve||int||変形アニメーション：曲線の状態を指定。Ti.UI.ANIMATION_CURVE_EASE_IN, Ti.UI.ANIMATION_CURVE_EASE_IN_OUT, Ti.UI.ANIMATION_CURVE_EASE_OUT, Ti.UI.ANIMATION_CURVE_LINEAR||
||delay||float||開始まで遅延時間（単位：ミリ秒）||
||duration||float||アニメーションに掛ける時を（単位：ミリ秒）||
||height||float||変形アニメーション：高さ||
||left||float||変形アニメーション：left位置||
||opacity||float||色アニメーション：透過度||
||opaque||boolean||色アニメーション：透過・非透過の切替アニメーション||
||repeat||int||アニメーション回数||
||right||float||変形アニメーション：right位置||
||top||float||変形アニメーション：top位置||
||transform||object||2DMatrix, 3DMatrixの値を設定し、変形アニメーション指定をする||
||transition||int||規定のパターンに基づくアニメーション||
||visible||boolean||表示・非表示の切替アニメーション||
||width||float||変形アニメーション：幅||
||zIndex||int||移動アニメーション：zIndex||

例えば次のようなコードが例ですが、もともと赤い背景色が1000ms(1秒)かけて黒にフェイドしていき、その後、さらに1秒かけてオレンジ色に変化していくというものになります。

{{{
var view = Titanium.UI.createView({
   backgroundColor:'red'
});
// イベントリスナに登録するため、変数化している。
// 実際にはJSON形式で渡す省略記法もある（後述）
var animation = Titanium.UI.createAnimation();
animation.backgroundColor = 'black';
animation.duration = 1000;
animation.addEventListener('complete',function(){
    animation.removeEventListener('complete',this);
    animation.backgroundColor = 'orange';
    view.animate(animation);
});
// Viewに対してアニメーションを指示している。
view.animate(animation);
}}}

またanimateにはAnimationオブジェクトに続いて、完了後のコールバック関数も引数にすることができます。

次の例は4段階にアニメーションが変化していくというものです。

{{{
// 枠線によって円形にしているViewを配置し、
// これに対するアニメーションを指示する、というものです。
var circle = Titanium.UI.createView({
    height:100,
    width:100,
    borderRadius:50,
    backgroundColor:'#336699',
    top:10
});

//
// ここではTitanium.UI.Animationではなく、JSON形式で直接指示している。
//
// STEP 1. 中心座標(100, 100)に移動
circle.animate({center:{x:100,y:100},curve:Ti.UI.ANIMATION_CURVE_EASE_IN_OUT,duration:1000}, function(){
    // STEP 2. 中心座標(0, 200)に移動
    circle.animate({center:{x:0,y:200},duration:1000}, function(){
        // STEP 3. 中心座標(300, 300)に移動
        circle.animate({center:{x:300,y:300},duration:1000},function(){
            // STEP 4. 元の位置である中心座標(150, 60)に戻る
            circle.animate({center:{x:150,y:60, duration:1000}});
        });
    })
});
}}}

== Transitionアニメーション ==
WindowやViewに対してフリップ移動やカールするアニメーションがありますが、ああいうことを行うための指定がtransitionアニメーションになります。

指定できるのは次のとおり５つです。

 * Ti.UI.iPhone.AnimationStyle.CURL_UP
 * Ti.UI.iPhone.AnimationStyle.FLIP_FROM_LEFT
 * Ti.UI.iPhone.AnimationStyle.FLIP_FROM_RIGHT
 * Ti.UI.iPhone.AnimationStyle.CURL_DOWN
 * Ti.UI.iPhone.AnimationStyle.NONE

{{{
var button = Titanium.UI.createButton({
    title:'Animate Me', 
    width:300,
    height:40,
    top:10
});
button.addEventListener('click', function(){
    button.animate({
        transition:Ti.UI.iPhone.AnimationStyle.FLIP_FROM_LEFT
    });
});
}}}

https://developer.appcelerator.com/apidoc/mobile/1.0/Titanium.UI.iPhone.AnimationStyle

== 2DMatrix, 3DMatrixによる変形アニメーション ==

2DMatrix, 3DMatrixは変形内容の指示を構成するオブジェクトで、Animationオブジェクトに与えることを目的としています。

さっそく比較的理解しやすい平面変形をする例を見てみましょう。

{{{

// 画像を表示したviewを変形させます
var cloud = Titanium.UI.createView({
    backgroundImage:'../images/cloud.png',
    height:178,
    width:261,
    top:10
});
var button = Titanium.UI.createButton({
    title:'Animate',
    width:200,
    height:40,
    bottom:20
});

button.addEventListener('click', function(){
    // 先ほどの画像を変形アニメーションします。
    var t = Ti.UI.create2DMatrix();
    t = t.rotate(20);
    t = t.scale(1.5);

    var animation = Titanium.UI.createAnimation();
    animation.transform = t;
    animation.duration = 3000;
    animation.autoreverse = true;
    animation.repeat = 3;

    // 上記の設定は以下のようなものです。
    // ----------------------------------
    // 「全体的に20度右回転(t.rotate)し、1.5倍に拡大(t.scale)する」変形(transform)を
    // 3000ミリ秒(duration)かけて行い、その後同じ時間かけて元に戻す(autoreverse)
    // 処理を3回繰り返す(repeat)
    cloud.animate(animation);
}}}

このように2DMatrixオブジェクトにエフェクトを重ねていき、Animationオブジェクトに設定するだけで変形を行えます。

回転エフェクトをする場合、回転するUI部品のanchorPointプロパティに設定することで回転軸をどこにするか設定できます。

{{{
var v = Titanium.UI.createView({
    backgroundColor:'#336699',
    top:10,
    left:220,
    height:50,
    width:50,
    anchorPoint:{x:0,y:0}
});
var t = Ti.UI.create2DMatrix();
t = t.rotate(90);

var a = Titanium.UI.createAnimation();
a.transform = t;
a.duration = 1000;
a.autoreverse = true;

v.animate(a);
}}}

この場合、左上を中心に９０度回転します。


anchorPointプロパティはx, yで回転軸を指定します。右下が{{{ {x:1, y:1} }}}となります。中心では{{{ {x:0.5, y:0.5} }}}です。


続いて3DMatrixによる３次元変形の例です。

{{{
// ここから先の解説はAPIリファレンス待ちです (>_<)
var button = Titanium.UI.createButton({
    title:'Animate Me', 
    width:300,
    height:40,
    top:10
});
button.addEventListener('click', function(){
    var t = Titanium.UI.create3DMatrix();
    t = t.rotate(200, 0, 1, 1);
    t = t.scale(3);
    t = t.translate(20, 50, 170);
    t.m34 = 1.0/-2000;
    button.animate({
        transform:t,
        duration:1000,
        autoreverse:true
    });
});
}}}

== 関連するAPIドキュメント ==
 * https://developer.appcelerator.com/apidoc/mobile/1.0/Titanium.UI.Animation

----
原著作者表示：[http://www.appcelerator.com/ Appcelerator, Inc]