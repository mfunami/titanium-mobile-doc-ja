#summary UIカタログ - WebView
#labels api,ui,view
= UIカタログ - !WebView =
WebViewはHTMLベースでのコンテンツを表示するための領域です。

safariで表示できる内容はすべて表示できると考えて問題ありません。

また直接HTML文字列を引き渡す事も可能ですので、動的に生成したHTMLによるリッチな表現をすることができます。

http://f.hatena.ne.jp/images/fotolife/d/donayama/20100227/20100227195104.png
http://f.hatena.ne.jp/images/fotolife/d/donayama/20100227/20100227195105.png

{{{
// 単純なURLのロード
var webview = Ti.UI.createWebView();
// こういったイベントの取得も可能です
webview.addEventListener('load',function(e){
     Ti.API.debug("webview loaded: "+e.url);
});
webview.url = "http://www.google.co.jp/";
}}}
{{{
// HTMLを動的に作成してhtmlプロパティにセットする例
var webview = Ti.UI.createWebView({
    backgroundColor: '#fff',
    borderRadius: 15,
    borderWidth : 5,
    borderColor : 'red'
});
webview.html = '<html><body><div style="color:white;">Hello from inline HTML. You should see white text and black background</div></body></html>';
}}}

== evalJSによる細かい制御 ==
webview内のドキュメントに対してJavaScriptで動的な評価を行うevalJSというメソッドが用意されています。

たとえばドキュメントのタイトルを取得するプロパティはありませんが、loadイベントにからめて以下のように記述することで取得が可能です。
{{{
webview.addEventListener('load', function(e){
    // document.titleを取得する。
    // 評価結果はstringとしてreturnされるのでtitleにセットされる。
    var title = view.evalJS('document.title');
    Ti.API.info(title);
});
}}}

== 特殊なイベント ==
すべて仮引数にurlプロパティを持ったWebViewに特化されたイベントです。

 * beforeload
 * error
 * load

{{{
webView.addEventListener('beforeload', function(e){
     // ロード前に実行される
});
webView.addEventListener('error', function(e){
     // エラー発生時に実行される
});
webView.addEventListener('load', function(e){
     // ロード完了後に実行される
});
}}}

== 関連するAPIドキュメント ==
 * http://developer.appcelerator.com/apidoc/mobile/latest/Titanium.UI.WebView-object

----
原著作者表示：[http://www.appcelerator.com/ Appcelerator, Inc]