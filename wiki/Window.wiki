#summary UIカタログ - Window
#labels ui,api,window,作業中
= UIカタログ - Window =

== モード ==
Windowには通常モードとフルスクリーンモードの二つがあります。

フルスクリーンモード下では、StatusBar・NavBar・ToolBar・ TabGroupといった部品をもつ事ができませんが、デバイスの表示領域一杯を使う事ができます。

一方、通常モードはStatusBarとNavBarが標準で表示されます。TabGroupを配置する場合、Windowオブジェクト群はTabGroupの子オブジェクトとして配置されます。

== Windowの作成 ==
windowを生成するために{{{Titanium.UI.createWindow}}}というAPIが用意されています。

仕様上ひとつのwindowしか同時に表示できないため、作成されたwindowはwindowスタックに格納されるだけになります。
現在表示されているwindowを閉じると、スタックの一つ手前にあるwindowが再び表示されるようになります。
{{{
// 切り替え時にはアニメーションする。独立した表示
var win = Titanium.UI.createWindow();
win.open({animated:true});

// 現在のTabに所属させるのなら次のとおり。
Titanium.UI.currentTab.open(win,{animated:true});
}}}

上記のように{{{open}}}メソッドの引数として{{{animeted}}}プロパティを指定する事により、アニメーション制御できます。この例ではwindowが左へスライドしていくような動きをします。{{{false}}}指定時は切り替わるだけの動きになります。

== 表示されているWindowの取得と操作 ==

現在表示されているwindowは{{{Titanium.UI.currentWindow}}}プロパティを用いてアクセスできます。

たとえば、このwindowに対して{{{close}}}メソッドを実行すると現在表示されているwindowを閉じることができます。
{{{
Titanium.UI.currentWindow.close();
}}}

== フルスクリーン ==
次のようにWindowのOpen時に指定するとフルスクリーン表示されます。
{{{
// 全面赤の背景色指定
var window = Titanium.UI.createWindow({
   backgroundColor:'red'
});
window.open({
    fullscreen:true
});
}}}

== コンテキストの分割 ==

Windows can be loaded from another Javascript file by specifying the property url and reference a file relative to your application Resources folder. It's important to note that Titanium will refuse to load Javascript files from a remote URL. Loading remote Javascript from a URL and providing it with the full capabilities of the Titanium API would be very dangerous.

When you Window is loaded from a separate Javascript file, the code will be executed in a separate Javascript context (called a "sub-context") than your app.js global context. It will also execute in its own separate thread.

The special property Titanium.UI.currentWindow is available inside a sub-context that points to the Javascript instance by reference in the global context.

== Passing Data ==
By default, sub-context variables cannot access Javascript references in the global context. However, the global context can allow its sub-contexts the ability to have access to properties and functions in the global context by reference assignment. An example best illustrates how to do this.

In app.js, you could define a function and a property.
{{{
var a = 1;
function b()
{
    return "hello";
}
}}}
Now, you can create a new Window - let's call it foo.js - in your app.js.
{{{
var w = Titanium.UI.createWindow({
    url:'foo.js'
});
}}}
To give your new window access to both a and b, you would need to assign them to the new window reference w.
{{{
w.a = a;
w.b = b;
}}}
Of course, you could give them a different name than their original names. However, what name you give them in your app.js is how you will reference them in foo.js. Now, let's look at the code for foo.js.
{{{
alert("b() = "+Titanium.UI.currentWindow.b());
}}}
In the above code, the foo.js will execute the function b in the global context and return the result. Since b is a reference (vs. a copy by value), any changes made to these Javascript references will be immediately available in all sub-contexts.

== カスタムイベント ==
If you'd like to send events to a window from the global context and vice versa, you could use the built-in event mechanism. For example, you could define a custom event called foo. The window could listen for this event and then respond with some action. For example, in your sub-context you might define:
{{{
Titanium.UI.currentWindow.addEventListener('foo',function(e){
    Titanium.API.info("foo event received = "+JSON.stringify(e));
});
}}}
You could now fire the event from app.js like this:
{{{
var window = Titanium.UI.createWindow({
    url:'bar.js'
});
window.open();
window.fireEvent('foo',{a:'b'});
}}}
It's worth noting two important limitations of the example above:

    * You must open the event before you can send events to it. You also may have to fire the event after a specified amount of time if you intend to immediately send data to the window. This is because windows are opened asynchronously and on a separate thread than the caller thread.
    * You can only send JSON-serializable data in a fireEvent. If you attempt to send objects that have function references, they will be null.

== アニメーション ==
Animations

Windows can be animated like any normal View. To transition between 2 windows, you can use the transition property on an animation. For example, to flip right-to-left between two windows, you could do the following:
{{{
var window2 = Titanium.UI.createWindow({url:'foo.js'});
var t = Ti.UI.iPhone.AnimationStyle.FLIP_FROM_LEFT;
window1.animate({view:window2,transition:t});
}}}
In the above example, the window2 view will be animated from the right-to-left over window1.

[guides_ui_animation 詳細はこちら]

== モーダルウィンドウ(iPadのみ) ==
For iPad, iPhone SDK 3.2 and Titanium 1.2 introduced several new ways of presenting modal windows.

The example below is a modal window.

http://img.skitch.com/20100406-bqb3f8pb6e4ger7wkcdcw5mbar.png

You can create this type of modal window on iPad with the following code snippet:
{{{
var window = Titanium.UI.createWindow();
window.open({
    modal:true,
    modalTransitionStyle: Ti.UI.iPhone.MODAL_TRANSITION_STYLE_FLIP_HORIZONTAL,
    modalStyle: Ti.UI.iPhone.MODAL_PRESENTATION_FORMSHEET
})
}}}

== Android "root" Windows ==

In Android, you may wish to specify that a window which you create (such as the first window) should be considered the root window and that the application should exit when the back button is pressed from that window. This is particularly useful if your application is not using a Tab Group and therefore the splash screen window is appearing whenever you press the back button from your lowest window on the stack.

To indicate that a particular window should cause an application to exit when the back button is pressed, pass exitOnClose: true as one of the creation arguments, as shown here:
{{{
var win = Titanium.UI.createWindow({
    title: 'My Root Window',
    exitOnClose: true
});
}}}

== Windowに関する特殊なイベント ==
windowも配下になるviewの一環なのでviewがもつすべてのイベントをハンドルすることができますが、それとは別に
windowのイベントとしては次のようなものがあります。

|| * イベント * || * 発生するタイミング * ||
||open||開く||
||close||閉じる||
||focus||選択状態になる||
||blur||選択外状態になる||

== 関連するAPIドキュメント ==
 * https://developer.appcelerator.com/apidoc/mobile/latest/Titanium.UI.Window-object

----
原著作者表示：[http://www.appcelerator.com/ Appcelerator, Inc]